* basher

** Notes
   .bash_profile is called for login shells, and .bashrc is called for non-login shells. If a variable is already defined before .bash_profile (c.f. $PATH) and the value is changed, the variable and its value will be inherited by the subshell. However newly defined variables in .bash_profile will not be inherited by the subshells, thus should be defined in .bashrc. Aliases and shell functions are not inherited, thus should be defined in .bashrc. To make those aliases and shell functions available to login shells, simply call .bashrc from .bash_profile.

   To make it convenient to reuse these configuration on multiple machines, where there may be specific local .bash_profile and .bashrc settings, two files are created: ._bash_profile and ._bashrc. Source ._bash_profile from the local .bash_profile, and ._bashrc from the local .bashrc. Private and local specific configurations should be kept in the local machine specific .bash_profile and .bashrc files on those specific machines and not shared in this library.

(Some systems have a convention to use a .bash_aliases file and the system-specific .bash_profile and .bashrc call the .bash_aliases file.)

** ._bash_profile.sh
   :PROPERTIES:
   :header-args: :tangle ~/._bash_profile.sh :comments org
   :END:
*** ssh
    #+BEGIN_SRC sh
      #http://mah.everybody.org/docs/ssh
      #https://stackoverflow.com/questions/18880024/start-ssh-agent-on-login
      SSH_ENV="$HOME/.ssh/environment"

      function start_agent {
	  echo "Initialising new SSH agent..."
	  /usr/bin/ssh-agent | sed 's/^echo/#echo/' > "${SSH_ENV}"
	  echo succeeded
	  chmod 600 "${SSH_ENV}"
	  . "${SSH_ENV}" > /dev/null
	  /usr/bin/ssh-add;
      }

      # Source SSH settings, if applicable

      if [ -f "${SSH_ENV}" ]; then
	  . "${SSH_ENV}" > /dev/null
	  #ps ${SSH_AGENT_PID} doesn't work under cywgin
	  ps -ef | grep ${SSH_AGENT_PID} | grep ssh-agent$ > /dev/null || {
	      start_agent;
	  }
      else
	  start_agent;
      fi

    #+END_SRC
     
*** ~/bin
   #+BEGIN_SRC sh
     PATH=$PATH:~/bin

   #+END_SRC





** ._bashrc.sh
   :PROPERTIES:
   :header-args: :tangle ~/._bashrc.sh :comments org
   :END:

*** History
   #+BEGIN_SRC sh
     # History
     export HISTFILESIZE=20000
     export HISTSIZE=10000
     shopt -s histappend
     # Combine multiline commands into one in history
     shopt -s cmdhist
     # Ignore duplicates, ls without options and builtin commands
     HISTCONTROL=ignoredups
     export HISTIGNORE="&:ls:[bf]g:exit"

   #+END_SRC
*** Use trash instead of delete
   #+BEGIN_SRC sh
     # Aliases for trash-cli
     alias rm='echo "Do not use rm, instead use del which is aliased to trash-put"'
     alias del='trash-put'

   #+END_SRC
*** Convenience aliases
   #+BEGIN_SRC sh
     # Aliases for ls
     alias ll='ls -Alh'
     alias la='ls -lah'
     alias l='ls -CFlh'
     alias lsd="ls -alF | grep /$"
     alias lr='ls -CFlhAR'

     # Miscellaneous Aliases
     alias c='clear'
     alias h="history|grep "
     alias f="find . |grep "

     # Directory navigation
     alias ..='cd ..'
     alias ...='cd ../..'
     alias ....='cd ../../..'
     alias .....='cd ../../../..'

   #+END_SRC
*** Node/NVM
   #+BEGIN_SRC sh
     # Node
     export NVM_DIR="$HOME/.nvm"
     [ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh" # This loads nvm
     export PATH=$PATH:$HOME/.nvm/versions/node/v8.5.0/bin
     [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion
   #+END_SRC

*** Git functions
   #+BEGIN_SRC sh
     function git_local_config {

	 if [[ -n $GIT_USER_EMAIL && -n $GIT_USER_NAME ]]
	 then
	     git config --local user.email "$GIT_USER_EMAIL"
	     git config --local user.name "$GIT_USER_NAME"
	 fi

     }


   #+END_SRC
